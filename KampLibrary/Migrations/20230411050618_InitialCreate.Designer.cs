// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KampLibrary.Migrations
{
    [DbContext(typeof(RecreationDotOrgContext))]
    [Migration("20230411050618_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("ActivityRecdata", b =>
                {
                    b.Property<int?>("ActivityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActivityLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActivityName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ActivityParentID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActivityID");

                    b.ToTable("ActivityEntries");
                });

            modelBuilder.Entity("CampsiteAttributesRecdata", b =>
                {
                    b.Property<int?>("AttributeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AttributeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("AttributeValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityID")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityType")
                        .HasColumnType("TEXT");

                    b.HasKey("AttributeID");

                    b.ToTable("CampsiteAttributesEntries");
                });

            modelBuilder.Entity("CampsitesRecdata", b =>
                {
                    b.Property<string>("CampsiteID")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CampsiteAccessible")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CampsiteLatitude")
                        .HasColumnType("REAL");

                    b.Property<double>("CampsiteLongitude")
                        .HasColumnType("REAL");

                    b.Property<string>("CampsiteName")
                        .HasColumnType("TEXT");

                    b.Property<string>("CampsiteType")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FacilityID")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Loop")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeOfUse")
                        .HasColumnType("TEXT");

                    b.HasKey("CampsiteID");

                    b.ToTable("CampsitesEntries");
                });

            modelBuilder.Entity("EntityActivitiesRecdata", b =>
                {
                    b.Property<string>("EntityID")
                        .HasColumnType("TEXT");

                    b.Property<string>("ActivityDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("ActivityFeeDescription")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ActivityID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntityType")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityID");

                    b.ToTable("EntityActivitiesEntries");
                });

            modelBuilder.Entity("EventsRecdata", b =>
                {
                    b.Property<string>("EventID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityID")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityType")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventADAAccess")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventAgeGroup")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventComments")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventEndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventFeeDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventFrequencyRateDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventName")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("EventRegistrationRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventScopeDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventStartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventTypeDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventURLAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventURLText")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SponsorClassType")
                        .HasColumnType("TEXT");

                    b.Property<string>("SponsorEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("SponsorName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SponsorPhone")
                        .HasColumnType("TEXT");

                    b.Property<string>("SponsorURLAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("SponsorURLText")
                        .HasColumnType("TEXT");

                    b.HasKey("EventID");

                    b.ToTable("EventsEntries");
                });

            modelBuilder.Entity("FacilitiesData", b =>
                {
                    b.Property<string>("FacilityID")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FacilityAdaAccess")
                        .HasColumnType("TEXT");

                    b.Property<string>("FacilityDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("FacilityDirections")
                        .HasColumnType("TEXT");

                    b.Property<string>("FacilityEmail")
                        .HasColumnType("TEXT");

                    b.Property<double>("FacilityLatitude")
                        .HasColumnType("REAL");

                    b.Property<double>("FacilityLongitude")
                        .HasColumnType("REAL");

                    b.Property<string>("FacilityMapURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("FacilityName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FacilityPhone")
                        .HasColumnType("TEXT");

                    b.Property<string>("FacilityReservationURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("FacilityTypeDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("FacilityUseFeeDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("Keywords")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LegacyFacilityID")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrgFacilityID")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentOrgID")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentRecAreaID")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Reservable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StayLimit")
                        .HasColumnType("TEXT");

                    b.HasKey("FacilityID");

                    b.ToTable("FacilitiesEntries");
                });

            modelBuilder.Entity("FacilityAddressesRecdata", b =>
                {
                    b.Property<string>("FacilityAddressID")
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressCountryCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressStateCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("FacilityAddressType")
                        .HasColumnType("TEXT");

                    b.Property<string>("FacilityID")
                        .HasColumnType("TEXT");

                    b.Property<string>("FacilityStreetAddress1")
                        .HasColumnType("TEXT");

                    b.Property<string>("FacilityStreetAddress2")
                        .HasColumnType("TEXT");

                    b.Property<string>("FacilityStreetAddress3")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.HasKey("FacilityAddressID");

                    b.ToTable("FacilityAddressesEntries");
                });

            modelBuilder.Entity("LinksRecdata", b =>
                {
                    b.Property<string>("EntityLinkID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityID")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityType")
                        .HasColumnType("TEXT");

                    b.Property<string>("LinkType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("URL")
                        .HasColumnType("TEXT");

                    b.HasKey("EntityLinkID");

                    b.ToTable("LinksEntries");
                });

            modelBuilder.Entity("MediaRecdata", b =>
                {
                    b.Property<string>("EntityMediaID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Credits")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmbedCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityID")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityType")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsGallery")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsPreview")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsPrimary")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MediaType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subtitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("URL")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Width")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityMediaID");

                    b.ToTable("MediaEntries");
                });

            modelBuilder.Entity("MemberToursRecdata", b =>
                {
                    b.Property<string>("MemberTourID")
                        .HasColumnType("TEXT");

                    b.Property<string>("TourID")
                        .HasColumnType("TEXT");

                    b.Property<string>("TourName")
                        .HasColumnType("TEXT");

                    b.HasKey("MemberTourID");

                    b.ToTable("MemberToursEntries");
                });

            modelBuilder.Entity("OrgEntitiesRecdata", b =>
                {
                    b.Property<string>("OrgID")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityID")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityType")
                        .HasColumnType("TEXT");

                    b.HasKey("OrgID");

                    b.ToTable("OrgEntitiesEntries");
                });

            modelBuilder.Entity("OrganizationRecdata", b =>
                {
                    b.Property<string>("OrgID")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrgAbbrevName")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrgImageURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrgJurisdictionType")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrgName")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrgParentID")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrgType")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrgURLAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrgURLText")
                        .HasColumnType("TEXT");

                    b.HasKey("OrgID");

                    b.ToTable("OrganizationEntries");
                });

            modelBuilder.Entity("PermitEntranceAttributesRecdata", b =>
                {
                    b.Property<int?>("AttributeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AttributeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("AttributeValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityID")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityType")
                        .HasColumnType("TEXT");

                    b.HasKey("AttributeID");

                    b.ToTable("PermitEntranceAttributesEntries");
                });

            modelBuilder.Entity("PermitEntranceZonesRecdata", b =>
                {
                    b.Property<string>("PermitEntranceZoneID")
                        .HasColumnType("TEXT");

                    b.Property<string>("PermitEntranceID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Zone")
                        .HasColumnType("TEXT");

                    b.HasKey("PermitEntranceZoneID");

                    b.ToTable("PermitEntranceZonesEntries");
                });

            modelBuilder.Entity("PermitEntrancesRecdata", b =>
                {
                    b.Property<string>("PermitEntranceID")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("District")
                        .HasColumnType("TEXT");

                    b.Property<string>("FacilityID")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<bool>("PermitEntranceAccessible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PermitEntranceDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("PermitEntranceName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PermitEntranceType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Town")
                        .HasColumnType("TEXT");

                    b.HasKey("PermitEntranceID");

                    b.ToTable("PermitEntrancesEntries");
                });

            modelBuilder.Entity("PermittedEquipmentRecdata", b =>
                {
                    b.Property<string>("EquipmentName")
                        .HasColumnType("TEXT");

                    b.Property<string>("CampsiteID")
                        .HasColumnType("TEXT");

                    b.Property<double?>("MaxLength")
                        .HasColumnType("REAL");

                    b.HasKey("EquipmentName");

                    b.ToTable("PermittedEquipmentEntries");
                });

            modelBuilder.Entity("RecAreaAddressesRecdata", b =>
                {
                    b.Property<string>("RecAreaAddressID")
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressCountryCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressStateCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecAreaAddressType")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecAreaID")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecAreaStreetAddress1")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecAreaStreetAddress2")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecAreaStreetAddress3")
                        .HasColumnType("TEXT");

                    b.HasKey("RecAreaAddressID");

                    b.ToTable("RecAreaAddressesEntries");
                });

            modelBuilder.Entity("RecAreaFacilitiesRecdata", b =>
                {
                    b.Property<string>("RecAreaID")
                        .HasColumnType("TEXT");

                    b.Property<string>("FacilityID")
                        .HasColumnType("TEXT");

                    b.HasKey("RecAreaID");

                    b.ToTable("RecAreaFacilitiesEntries");
                });

            modelBuilder.Entity("RecAreaFacility", b =>
                {
                    b.Property<string>("RecAreaID")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Keywords")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrgRecAreaID")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentOrgID")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecAreaDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecAreaDirections")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecAreaEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecAreaFeeDescription")
                        .HasColumnType("TEXT");

                    b.Property<double>("RecAreaLatitude")
                        .HasColumnType("REAL");

                    b.Property<double>("RecAreaLongitude")
                        .HasColumnType("REAL");

                    b.Property<string>("RecAreaMapURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecAreaName")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecAreaPhone")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecAreaReservationURL")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Reservable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StayLimit")
                        .HasColumnType("TEXT");

                    b.HasKey("RecAreaID");

                    b.ToTable("RecAreaEntries");
                });

            modelBuilder.Entity("TourAttributesFacility", b =>
                {
                    b.Property<double>("AttributeID")
                        .HasColumnType("REAL");

                    b.Property<string>("AttributeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("AttributeValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityID")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityType")
                        .HasColumnType("TEXT");

                    b.HasKey("AttributeID");

                    b.ToTable("TourAttributesEntries");
                });

            modelBuilder.Entity("ToursFacility", b =>
                {
                    b.Property<string>("TourID")
                        .HasColumnType("TEXT");

                    b.Property<string>("ATTRIBUTES")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ENTITYMEDIA")
                        .HasColumnType("TEXT");

                    b.Property<string>("FacilityID")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MEMBERTOURS")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("TourAccessible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TourDescription")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TourDuration")
                        .HasColumnType("REAL");

                    b.Property<string>("TourName")
                        .HasColumnType("TEXT");

                    b.Property<string>("TourType")
                        .HasColumnType("TEXT");

                    b.HasKey("TourID");

                    b.ToTable("ToursEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
